frameworkVersion: ">=3.38.0 <4.0.0"
service: metadata-api

provider:
  name: aws
  ecr:
    images:
      okdata-metadata-api:
        path: ./
        platform: linux/amd64
  region: ${opt:region, 'eu-west-1'}
  endpointType: REGIONAL
  stage: ${opt:stage, 'dev'}
  deploymentBucket:
    name: ${self:custom.deploymentBucket.${self:provider.stage}, self:custom.deploymentBucket.dev}
    serverSideEncryption: AES256
  deploymentPrefix: deploy
  logRetentionInDays: 90
  tracing:
    lambda: true
    apiGateway: true
  iam:
    role:
      permissionsBoundary: "arn:aws:iam::${aws:accountId}:policy/oslokommune/oslokommune-boundary"
      managedPolicies:
        - 'arn:aws:iam::${aws:accountId}:policy/metadata-api-policy'
        - 'arn:aws:iam::aws:policy/AWSXRayDaemonWriteAccess'
  tags:
    GIT_REV: ${git:branch}:${git:sha1}
  environment:
    SERVICE_NAME: ${self:service}
    GIT_REV: ${git:branch}:${git:sha1}
    OKDATA_PERMISSION_API_URL: ${ssm:/dataplatform/shared/api-gateway-url}/okdata-permission-api
    ENABLE_AUTH: true
    KEYCLOAK_SERVER: ${ssm:/dataplatform/shared/keycloak-server-url}
    KEYCLOAK_REALM: api-catalog
    RESOURCE_SERVER_CLIENT_ID: okdata-resource-server
    CLIENT_ID: metadata-api
    BASE_URL: ${self:custom.baseUrl.${self:provider.stage}, self:custom.baseUrl.dev}
    DATA_BUCKET_NAME: ${self:custom.dataBucket.${self:provider.stage}, self:custom.dataBucket.dev}
    LOGS_BUCKET_NAME: ${self:custom.logsBucket.${self:provider.stage}, self:custom.logsBucket.dev}

plugins:
  - serverless-better-credentials # must be first
  - "@kakkuk/serverless-aws-apigateway-documentation"
  - serverless-scriptable-plugin
  - serverless-plugin-git-variables
  - serverless-prune-plugin

package:
  patterns:
    - '!**/*'
    - './schema/**'
    - './templates/**/*.jinja'
    - './metadata/*.py'
    - './metadata/dataset/*.py'
    - './metadata/version/*.py'
    - './metadata/edition/*.py'
    - './metadata/distribution/*.py'

resources:
  Description: |
    ${self:service} ${git:branch}:${git:sha1}
    ${git:message}

custom:
  prune:
    automatic: true
    number: 3
  documentation:
    info:
      version: ${git:sha1}
      title: 'Metadata-api'
      description: 'Metadata-api for dataplattform'
    models:
      - ${file(serverless/models/UserErrorResponse.yaml)}
      - ${file(serverless/models/StandardResponse.yaml)}
      - ${file(serverless/models/Dataset.yaml)}
      - ${file(serverless/models/DatasetPatch.yaml)}
      - ${file(serverless/models/Edition.yaml)}
      - ${file(serverless/models/Version.yaml)}
      - ${file(serverless/models/Distribution.yaml)}
      - ${file(serverless/models/Datasets.yaml)}
      - ${file(serverless/models/Editions.yaml)}
      - ${file(serverless/models/Versions.yaml)}
      - ${file(serverless/models/Distributions.yaml)}
    authorizers:
      - ${file(serverless/kc-authorizer.yaml)}
  exportGitVariables: false
  deploymentBucket:
    prod: ok-origo-dataplatform-config-prod
    dev: ok-origo-dataplatform-config-dev
  dataBucket:
    prod: ok-origo-dataplatform-prod
    dev: ok-origo-dataplatform-dev
  logsBucket:
    prod: ok-origo-dataplatform-logs-prod
    dev: ok-origo-dataplatform-logs-dev
  baseUrl:
    prod: https://dataplatform.api.oslo.kommune.no/metadata
    dev: https://api.data-dev.oslo.systems/metadata
  keycloakArn:
    prod: arn:aws:lambda:${aws:region}:${aws:accountId}:function:keycloak-authorizer-prod-authenticate
    dev: arn:aws:lambda:${aws:region}:${aws:accountId}:function:keycloak-authorizer-dev-authenticate

functions:
  create_dataset: ${file(serverless/functions/create_dataset.yaml)}
  get_datasets: ${file(serverless/functions/get_datasets.yaml)}
  get_dataset:  ${file(serverless/functions/get_dataset.yaml)}
  get_code_examples: ${file(serverless/functions/get_code_examples.yaml)}
  patch_dataset: ${file(serverless/functions/patch_dataset.yaml)}
  update_dataset: ${file(serverless/functions/update_dataset.yaml)}
  create_version: ${file(serverless/functions/create_version.yaml)}
  update_version: ${file(serverless/functions/update_version.yaml)}
  get_versions: ${file(serverless/functions/get_versions.yaml)}
  get_version: ${file(serverless/functions/get_version.yaml)}
  create_edition: ${file(serverless/functions/create_edition.yaml)}
  update_edition: ${file(serverless/functions/update_edition.yaml)}
  get_editions: ${file(serverless/functions/get_editions.yaml)}
  get_edition: ${file(serverless/functions/get_edition.yaml)}
  create_distribution: ${file(serverless/functions/create_distribution.yaml)}
  update_distribution: ${file(serverless/functions/update_distribution.yaml)}
  get_distributions: ${file(serverless/functions/get_distributions.yaml)}
  get_distribution: ${file(serverless/functions/get_distribution.yaml)}
  update-last-read:
    image:
      name: okdata-metadata-api
      command:
        - jobs.update_last_read.handler.handler
    events:
      # We collect logs from the previous day. S3 can take a long time
      # to finish populating the access logs, so give it good time
      # after midnight to finish before we run this.
      - schedule: cron(0 5 ? * SUN *)
    timeout: 20
