frameworkVersion: ">=1.64.0 <2.0.0"
service: metadata-api

provider:
  name: aws
  runtime: python3.7
  region: ${opt:region, 'eu-west-1'}
  stage: ${opt:stage, 'dev'}
  deploymentBucket:
    name: ${self:custom.deploymentBucket.${self:provider.stage}, self:custom.deploymentBucket.dev}
    serverSideEncryption: AES256
  deploymentPrefix: deploy
  tracing:
    lambda: true
    apiGateway: true
  layers:
    - ${ssm:/dataplatform/python-base-lambda-layer/arn}
  rolePermissionsBoundary: "arn:aws:iam::#{AWS::AccountId}:policy/oslokommune/oslokommune-boundary"
  iamManagedPolicies:
    - Fn::Join:
      - ':'
      - - 'arn:aws:iam:'
        - Ref: AWS::AccountId
        - 'policy/metadata-api-policy'
    - Fn::Join:
        - ':'
        - - 'arn:aws:iam::aws'
          - 'policy/AWSXRayDaemonWriteAccess'
  tags:
    GIT_REV: ${git:branch}:${git:sha1}
  environment:
    SERVICE_NAME: ${self:service}
    GIT_REV: ${git:branch}:${git:sha1}
    AUTHORIZER_API: ${ssm:/dataplatform/shared/api-gateway-url}/simple-dataset-authorizer
    ENABLE_AUTH: true
    KEYCLOAK_SERVER: ${ssm:/dataplatform/shared/keycloak-server-url}
    KEYCLOAK_REALM: api-catalog
    CLIENT_ID: metadata-api
    CLIENT_SECRET: ${ssm:/dataplatform/${self:service.name}/keycloak-client-secret~true}


plugins:
  - serverless-aws-documentation
  - serverless-python-requirements
  - serverless-scriptable-plugin
  - serverless-plugin-git-variables
  - serverless-plugin-common-layers
  - serverless-pseudo-parameters
  - serverless-es-logs

package:
  exclude:
    - './**'
  include:
    - '!./**'
    - './schema/**'
    - './metadata/*.py'
    - './metadata/dataset/*.py'
    - './metadata/version/*.py'
    - './metadata/edition/*.py'
    - './metadata/distribution/*.py'

resources:
  Description: |
    ${self:service} ${git:branch}:${git:sha1}
    ${git:message}

custom:
  pythonRequirements:
    dockerizePip: non-linux
    usePoetry: false
  esLogs:
    endpoint: ${ssm:/dataplatform/shared/logs-elasticsearch-endpoint}
    index: dataplatform-services
    filterPattern: '{ $.function_name = "*" }'
  documentation:
    info:
      version: ${git:sha1}
      title: 'Metadata-api'
      description: 'Metadata-api for dataplattform'
    models:
      - ${file(serverless/models/UserErrorResponse.yaml)}
      - ${file(serverless/models/StandardResponse.yaml)}
      - ${file(serverless/models/Dataset.yaml)}
      - ${file(serverless/models/Edition.yaml)}
      - ${file(serverless/models/Version.yaml)}
      - ${file(serverless/models/Distribution.yaml)}
      - ${file(serverless/models/Datasets.yaml)}
      - ${file(serverless/models/Editions.yaml)}
      - ${file(serverless/models/Versions.yaml)}
      - ${file(serverless/models/Distributions.yaml)}
    authorizers:
      - ${file(serverless/kc-authorizer.yaml)}
  exportGitVariables: false
  deploymentBucket:
    prod: ok-origo-dataplatform-config-prod
    dev: ok-origo-dataplatform-config-dev
  keycloakArn:
    prod: arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:keycloak-authorizer-prod-authenticate
    dev: arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:keycloak-authorizer-dev-authenticate

functions:
  create_dataset: ${file(serverless/functions/create_dataset.yaml)}
  get_datasets: ${file(serverless/functions/get_datasets.yaml)}
  get_dataset:  ${file(serverless/functions/get_dataset.yaml)}
  update_dataset: ${file(serverless/functions/update_dataset.yaml)}
  create_version: ${file(serverless/functions/create_version.yaml)}
  update_version: ${file(serverless/functions/update_version.yaml)}
  get_versions: ${file(serverless/functions/get_versions.yaml)}
  get_version: ${file(serverless/functions/get_version.yaml)}
  create_edition: ${file(serverless/functions/create_edition.yaml)}
  update_edition: ${file(serverless/functions/update_edition.yaml)}
  get_editions: ${file(serverless/functions/get_editions.yaml)}
  get_edition: ${file(serverless/functions/get_edition.yaml)}
  create_distribution: ${file(serverless/functions/create_distribution.yaml)}
  update_distribution: ${file(serverless/functions/update_distribution.yaml)}
  get_distributions: ${file(serverless/functions/get_distributions.yaml)}
  get_distribution: ${file(serverless/functions/get_distribution.yaml)}
